const express = require("express");
const puppeteer = require("puppeteer");

const app = express();
app.use(express.json());

// –ö–µ—à –¥–ª—è cookies
let cachedCookies = null;
let lastLoginTime = null;
const CACHE_DURATION = 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Puppeteer –¥–ª—è Render
const puppeteerConfig = {
  headless: "new",
  args: [
    "--no-sandbox",
    "--disable-setuid-sandbox",
    "--disable-dev-shm-usage",
    "--disable-gpu",
    "--disable-software-rasterizer",
    "--disable-dev-tools",
    "--no-first-run",
    "--no-zygote",
    "--single-process",
    "--disable-extensions",
    "--disable-background-networking",
    "--disable-background-timer-throttling",
    "--disable-backgrounding-occluded-windows",
    "--disable-breakpad",
    "--disable-component-extensions-with-background-pages",
    "--disable-features=TranslateUI",
    "--disable-ipc-flooding-protection",
    "--disable-renderer-backgrounding",
    "--force-color-profile=srgb",
    "--metrics-recording-only",
    "--mute-audio",
  ],
  executablePath: process.env.PUPPETEER_EXECUTABLE_PATH,
};

async function loginToRemOnline(email, password) {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...");

  let browser;
  try {
    browser = await puppeteer.launch(puppeteerConfig);
    console.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");

    const page = await browser.newPage();
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    );

    console.log("üì± –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É...");
    await page.goto("https://web.roapp.io/login", {
      waitUntil: "networkidle0",
      timeout: 30000,
    });

    console.log("‚úçÔ∏è –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...");
    await page.type('input[name="email"]', email, { delay: 100 });
    await page.type('input[name="password"]', password, { delay: 100 });

    console.log("üîê –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...");
    await Promise.all([
      page.click('button[type="submit"]'),
      page.waitForNavigation({ waitUntil: "networkidle0", timeout: 30000 }),
    ]);

    console.log("üç™ –û—Ç—Ä–∏–º–∞–Ω–Ω—è cookies...");
    const cookies = await page.cookies();
    const cookieString = cookies.map((c) => `${c.name}=${c.value}`).join("; ");

    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ${cookies.length} cookies`);

    await browser.close();
    return cookieString;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
    if (browser) await browser.close();
    throw error;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get("/", (req, res) => {
  res.json({
    status: "RemOnline Login Service",
    version: "1.0.0",
    hasCachedCookies: !!cachedCookies,
    lastLogin: lastLoginTime ? new Date(lastLoginTime).toISOString() : null,
  });
});

// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cookies
app.post("/get-cookies", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: "Email —Ç–∞ password –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    const now = Date.now();
    if (
      cachedCookies &&
      lastLoginTime &&
      now - lastLoginTime < CACHE_DURATION
    ) {
      console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ cookies –∑ –∫–µ—à—É");
      return res.json({
        success: true,
        cookies: cachedCookies,
        cached: true,
        expiresIn: Math.round((CACHE_DURATION - (now - lastLoginTime)) / 1000),
      });
    }

    // –ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω
    console.log("üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω...");
    const cookies = await loginToRemOnline(email, password);

    cachedCookies = cookies;
    lastLoginTime = now;

    res.json({
      success: true,
      cookies: cookies,
      cached: false,
      expiresIn: CACHE_DURATION / 1000,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:", error);
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

// Health check
app.get("/health", (req, res) => {
  res.json({ status: "ok" });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Login service –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
