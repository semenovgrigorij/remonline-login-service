const express = require("express");
const puppeteer = require("puppeteer-core");
const chromium = require("@sparticuz/chromium");

const app = express();
app.use(express.json());

// –ö–µ—à –¥–ª—è cookies
let cachedCookies = null;
let lastLoginTime = null;
const CACHE_DURATION = 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω

async function loginToRemOnline(email, password) {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...");

  let browser;
  try {
    browser = await puppeteer.launch({
      args: chromium.args,
      defaultViewport: chromium.defaultViewport,
      executablePath: await chromium.executablePath(),
      headless: chromium.headless,
    });

    console.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");

    const page = await browser.newPage();

    // –ó–±—ñ–ª—å—à–µ–Ω–æ timeout –¥–ª—è –ø–æ–≤—ñ–ª—å–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
    page.setDefaultNavigationTimeout(60000); // 60 —Å–µ–∫—É–Ω–¥
    page.setDefaultTimeout(60000);

    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    );

    console.log("üì± –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É...");

    // –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'domcontentloaded' –∑–∞–º—ñ—Å—Ç—å 'networkidle0' - —à–≤–∏–¥—à–µ
    await page.goto("https://web.roapp.io/login", {
      waitUntil: "domcontentloaded",
      timeout: 60000,
    });

    console.log("‚è≥ –ß–µ–∫–∞—î–º–æ —Ñ–æ—Ä–º—É –ª–æ–≥—ñ–Ω—É...");
    await page.waitForSelector('input[name="email"]', { timeout: 10000 });

    console.log("‚úçÔ∏è –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...");
    await page.type('input[name="email"]', email, { delay: 50 });
    await page.type('input[name="password"]', password, { delay: 50 });

    console.log("üîê –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É...");
    await page.click('button[type="submit"]');

    console.log("‚è≥ –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ª–æ–≥—ñ–Ω—É...");
    // –ó–ú–Ü–ù–ï–ù–û: –ß–µ–∫–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∑ –±—ñ–ª—å—à–∏–º timeout
    await page.waitForNavigation({
      waitUntil: "domcontentloaded",
      timeout: 60000,
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É
    await page.waitForTimeout(2000);

    console.log("üç™ –û—Ç—Ä–∏–º–∞–Ω–Ω—è cookies...");
    const cookies = await page.cookies();

    if (cookies.length === 0) {
      throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ cookies - –º–æ–∂–ª–∏–≤–æ, –Ω–µ–≤–¥–∞–ª–∏–π –ª–æ–≥—ñ–Ω");
    }

    const cookieString = cookies.map((c) => `${c.name}=${c.value}`).join("; ");

    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ${cookies.length} cookies`);

    await browser.close();
    return cookieString;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
    if (browser) {
      try {
        await browser.close();
      } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞:", e.message);
      }
    }
    throw error;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get("/", (req, res) => {
  res.json({
    status: "RemOnline Login Service",
    version: "2.1.0",
    engine: "puppeteer-core + chromium",
    hasCachedCookies: !!cachedCookies,
    lastLogin: lastLoginTime ? new Date(lastLoginTime).toISOString() : null,
    cacheExpiresIn:
      cachedCookies && lastLoginTime
        ? Math.max(
            0,
            Math.round((CACHE_DURATION - (Date.now() - lastLoginTime)) / 1000)
          )
        : 0,
  });
});

// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cookies
app.post("/get-cookies", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: "Email —Ç–∞ password –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    const now = Date.now();
    if (
      cachedCookies &&
      lastLoginTime &&
      now - lastLoginTime < CACHE_DURATION
    ) {
      console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ cookies –∑ –∫–µ—à—É");
      return res.json({
        success: true,
        cookies: cachedCookies,
        cached: true,
        expiresIn: Math.round((CACHE_DURATION - (now - lastLoginTime)) / 1000),
      });
    }

    // –ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω
    console.log("üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω...");
    const cookies = await loginToRemOnline(email, password);

    cachedCookies = cookies;
    lastLoginTime = now;

    res.json({
      success: true,
      cookies: cookies,
      cached: false,
      expiresIn: CACHE_DURATION / 1000,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:", error);
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

// Health check
app.get("/health", (req, res) => {
  res.json({ status: "ok" });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Login service –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîß Timeout: 60 —Å–µ–∫—É–Ω–¥`);
  console.log(`üíæ Cache duration: ${CACHE_DURATION / 1000 / 60} —Ö–≤–∏–ª–∏–Ω`);
});
